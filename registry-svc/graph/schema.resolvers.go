package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.39

import (
	"context"
	"fmt"

	"github.com/mvandergrift/registry-svc/graph/model"
)

// Operations is the resolver for the operations field.
func (r *apiResolver) Operations(ctx context.Context, obj *model.API) ([]*model.APIOperation, error) {
	var apiAccess []*model.APIOperation

	db := r.Bun.Db
	err := db.NewSelect().
		Model(&apiAccess).
		Column("federated_graph_id").
		Column("operation_id").
		Column("operation_name").
		Column("duration").
		Column("access_time").
		Where("api_name = ?", obj.Name).
		Order("access_time DESC").
		Scan(ctx)

	if err != nil {
		return nil, fmt.Errorf("error querying Operations: %w", err)
	}

	return apiAccess, nil
}

// Applications is the resolver for the applications field.
func (r *apiResolver) Applications(ctx context.Context, obj *model.API) ([]*model.Application, error) {
	var applications []*model.Application

	db := r.Bun.Db
	err := db.NewSelect().
		Model(&applications).
		ColumnExpr("application.app_id as id").
		ColumnExpr("application.app_name as name").
		Column("description").
		Column("owner_id").
		Join("JOIN dependency ON dependency.app_id = application.app_id").
		Where("dependency.api_id = ?", obj.Id).
		Order("application.app_name ASC").
		Scan(ctx)

	if err != nil {
		return nil, fmt.Errorf("error querying API.Applications: %w", err)
	}

	return applications, nil
}

// Owner is the resolver for the owner field.
func (r *apiResolver) Owner(ctx context.Context, obj *model.API) (*model.Owner, error) {
	var owner []*model.Owner

	db := r.Bun.Db
	err := db.NewSelect().
		Model(&owner).
		Column("user_id").
		Column("forename").
		Column("surname").
		Column("department").
		Column("title").
		Column("email").
		Column("phone").
		Column("image_url").
		Column("description").
		Where("user_id = ?", obj.OwnerId).
		Scan(ctx)

	if err != nil {
		return nil, fmt.Errorf("error querying Owner: %w", err)
	}

	if (len(owner)) == 0 {
		return nil, nil
	}

	return owner[0], nil
}

// Owner is the resolver for the owner field.
func (r *applicationResolver) Owner(ctx context.Context, obj *model.Application) (*model.Owner, error) {
	var owner []*model.Owner

	db := r.Bun.Db
	err := db.NewSelect().
		Model(&owner).
		Column("user_id").
		Column("forename").
		Column("surname").
		Column("department").
		Column("title").
		Column("email").
		Column("phone").
		Column("image_url").
		Column("description").
		Where("user_id = ?", obj.OwnerId).
		Scan(ctx)

	if err != nil {
		return nil, fmt.Errorf("error querying Owner: %w", err)
	}

	if (len(owner)) == 0 {
		return nil, nil
	}

	return owner[0], nil
}

// Apis is the resolver for the apis field.
func (r *applicationResolver) Apis(ctx context.Context, obj *model.Application) ([]*model.API, error) {
	var apis []*model.API

	db := r.Bun.Db
	err := db.NewSelect().
		Distinct().
		Model(&apis).
		ColumnExpr("api.api_id as id").
		ColumnExpr("api.api_name as name").
		Column("federated_graph_id").
		Column("description").
		Column("owner_id").
		Join("JOIN dependency ON dependency.api_id = api.api_id").
		Where("dependency.app_id = ?", obj.ID).
		Order("api.api_name ASC").
		Scan(ctx)

	if err != nil {
		return nil, fmt.Errorf("error querying Application.apis: %w", err)
	}

	return apis, nil
}

// APIActivity is the resolver for the apiActivity field.
func (r *queryResolver) APIActivity(ctx context.Context) ([]*model.APIActivity, error) {
	var apiActivities []*model.APIActivity

	db := r.Cn.Db
	rows, err := db.Query(`SELECT 
			operation_name, 
			graph_id, 
			subgraph_id, 
			subgraph_name, 
			op_type, 
			first_access, 
			last_access 
		FROM api_contents
		ORDER BY last_access DESC
		`)
	if err != nil {
		return nil, fmt.Errorf("error querying APIActivity: %w", err)
	}

	defer rows.Close()

	for rows.Next() {
		var apiActivity model.APIActivity

		err := rows.Scan(
			&apiActivity.OperationName,
			&apiActivity.FederationID,
			&apiActivity.SubgraphName,
			&apiActivity.SubgraphID,
			&apiActivity.OperationType,
			&apiActivity.FirstAccess,
			&apiActivity.LastAccess,
		)

		if err != nil {
			return nil, fmt.Errorf("error scanning APIActivity: %w", err)
		}

		apiActivities = append(apiActivities, &apiActivity)
	}

	return apiActivities, nil
}

// API is the resolver for the api field.
func (r *queryResolver) API(ctx context.Context) ([]*model.API, error) {
	var apis []*model.API

	db := r.Bun.Db
	err := db.NewSelect().
		Model(&apis).
		ColumnExpr("api_name as name").
		Column("federated_graph_id").
		Column("owner_id").
		Column("description").
		ColumnExpr("api_id as id").
		Order("api_name ASC").
		Scan(ctx)

	if err != nil {
		return nil, fmt.Errorf("error querying API: %w", err)
	}

	return apis, nil
}

// APIByKey is the resolver for the apiByKey field.
func (r *queryResolver) APIByKey(ctx context.Context, apiName string, federatedGraphID string) (*model.API, error) {
	var apis model.API

	db := r.Bun.Db
	err := db.NewSelect().
		Model(&apis).
		ColumnExpr("api_name as name").
		Column("federated_graph_id").
		Column("owner_id").
		Column("description").
		ColumnExpr("api_id as id").
		Where("api_name = ? and federated_graph_id = ?", apiName, federatedGraphID).
		Scan(ctx)

	if err != nil {
		return nil, fmt.Errorf("error querying APIByKey: %w", err)
	}

	return &apis, nil
}

// Application is the resolver for the application field.
func (r *queryResolver) Application(ctx context.Context) ([]*model.Application, error) {
	var applications []*model.Application

	db := r.Bun.Db
	err := db.NewSelect().
		Model(&applications).
		Distinct().
		ColumnExpr("application.app_id as id").
		ColumnExpr("application.app_name as name").
		Column("description").
		Column("owner_id").
		Join("JOIN dependency ON dependency.app_id = application.app_id").
		Order("application.app_name ASC").
		Scan(ctx)

	if err != nil {
		return nil, fmt.Errorf("error querying API.Applications: %w", err)
	}

	return applications, nil
}

// ApplicationByID is the resolver for the applicationById field.
func (r *queryResolver) ApplicationByID(ctx context.Context, id int) (*model.Application, error) {
	var application model.Application

	db := r.Bun.Db
	err := db.NewSelect().
		Model(&application).
		ColumnExpr("application.app_id as id").
		ColumnExpr("application.app_name as name").
		Column("description").
		Column("owner_id").
		Where("app_id = ?", id).
		Scan(ctx)

	if err != nil {
		return nil, fmt.Errorf("error querying API.Applications: %w", err)
	}

	return &application, nil
}

// Api returns ApiResolver implementation.
func (r *Resolver) Api() ApiResolver { return &apiResolver{r} }

// Application returns ApplicationResolver implementation.
func (r *Resolver) Application() ApplicationResolver { return &applicationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

type apiResolver struct{ *Resolver }
type applicationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
